
-DG_DISABLE_ASSERT

/*
 *  This is the IFF-ILBM Gimp plugin by Johnny Teveﬂen,
 *  eMail: <j.tevessen@line.org>
 *
 *  Short:
 *    IFF (InterchangeFileFormat) is a universal data
 *    exchange format developed by Electronic Arts.
 *    It has shipped with the legendary Amiga computers
 *    for years. IFF-ILBM (InterLeavedBitMap) is a
 *    subtype for storing bitmapped images in a non-
 *    chunky, line oriented format.  Great for pictures
 *    upto 256 colors, quite tricky for 24bit ones.
 *      IFF is very extensible; programs shall skip
 *    unknown chunks (blocks of information).  Different
 *    types of data can be stored in the same file
 *    using a recursive or stringent structure.  This
 *    feature is rarely used.  Compression (using a
 *    runlength algorithm) is bad.
 *      Being born into the Amiga custom chipset, IFF-
 *    ILBM supports a CAMG (CommodoreAMiGa) chunk
 *    containing Amiga native flags for the screenmode
 *    (resolution and decoding algorithm) to use.
 *    This includes HAM (Hold-And-Modify, a choice-
 *    reduced 4096..16M mode), EHB (Extra-HalfBrite,
 *    supports twice as many colors, but the upper
 *    half is a mirror of the lower half in 50%
 *    intensity), and asymmetric LoRes, Interlaced,
 *    HiRes, and SuperHiRes modes.  This allowes
 *    geometries of 1:1, 1:2, 1:4, and 2:1.  Two
 *    aspect fields contain more exact informations,
 *    but they're often not fulfilled correctly.
 *      If CAMG is missing, for example, one can
 *    only guess for HAM.
 *
 *  Already there:
 *
 *  o Support for uncompressed and ByteRun1 compressed
 *    bitmaps
 *  o Loading/Saving indexed pictures 1..256 colors
 *  o Loading/Saving transparency (alpha channel) in
 *    1bit-Mode (mask). Loading transparentColor mask.
 *  o Loading/Saving 24bit RGB pictures with 1bit
 *    alpha channel (25 planes in file)
 *  o Promoting indexed pictures to grayscale if possible
 *  o Auto-converting grayscale pictures to 256 color
 *    indexed mode on saving (convert image to indexed
 *    before saving to reduce amount of "colors")
 *  o Loading of HAM6 (as RGB) and EHB6 (as indexed64)
 *  o HAM6 transparency
 *
 *
 *  Missing:
 *
 *  o bmhd.masking == mskLasso (evil without a real blitter,
 *    need to do XOR throughout lines)
 *  o On indexed images, transparent color is ignored
 *    while loading
 *  o mskHasTransparentColor and HAM: Check whether it is okay
 *    to affect only the pixels directly drawn with that pen,
 *    or also add HAMified ones with the same color
 *  o Support for compression mode 2 (which has never really
 *    been important---it compresses column-by-column and
 *    compresses slightly better than ByteRun1)
 *  o Save options requester
 *  o Save HAM/EHB?
 *  o Check for 15/16 bit HighColor ILBMs (?)
 *  o Improve IFF parsing
 *  o Add support for multiple images via catalogs
 *  o Somehow integrate ILBM-TINY thumbnails
 *  o Try to guess HAM if no CAMG chunk is given
 *  o Load option to allow scaling of LoRes/Interlaced-Images
 *  o Add EHB2-5 support (yes, they're out there!)
 *  o Add aspectX/Y support (currently 1/1)
 *  o What about *real* alpha channels? 32planes, mask set?
 *  o Maybe integrate DRNG cycling chains as gradients
 *  o Could also be used to read ILBM palettes
 *  o On 24bit pictures with alpha channel the latter
 *    is only saved as 1bit (in ILBM mode)
 *  o Huge code cleanup. Maybe in spring.
 *
 *
 *  Used code fragments:
 *
 *  o ByteRun1 encode/decoder:
 *    Parts lent from packer.c/unpacker.c by Jerry Morrison
 *    and Steve Shaw, Electronic Arts. This code is placed
 *    in the Public Domain, dated 1985-11-15
 *  o GIMP plugin skeleton:
 *    Code of xpm.c and jpeg.c (GPL)1995 Spencer Kimball and Peter Mattis
 *    and png.c (GPL)1998 Michael Sweet and Daniel Skarda
 *    used as a template
 *
 *  This code went through GNU indent(1).
 *  Please report bugs and suggestions.
 *
 *
 *  Changes:
 *
 *  (See ./ChangeLog)
 *
 */


ciao,
johnny
<j.tevessen@line.org>

